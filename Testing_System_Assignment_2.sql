DROP DATABASE IF EXISTS Testing_System_Assignment_2;

CREATE DATABASE IF NOT EXISTS Testing_System_Assignment_2;

USE Testing_System_Assignment_2;

-- BẢNG 1
DROP TABLE IF EXISTS Department;
CREATE TABLE Department (
	DepartmentID 		SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	DepartmentName 		NVARCHAR(100) NOT NULL UNIQUE KEY
);


-- BẢNG 2
DROP TABLE IF EXISTS `Position`;
CREATE TABLE `Position` (
	PositionID			SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	PositionName		ENUM('Dev','Test','Scrum Master','PM') NOT NULL UNIQUE KEY
);


-- BẢNG 3
DROP TABLE IF EXISTS `Account`;
CREATE TABLE `Account` (
	AccountID 			SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	Email 				VARCHAR(100) NOT NULL UNIQUE KEY,
	Username			VARCHAR(100) NOT NULL,
	FullName 			VARCHAR(100) NOT NULL,
	DepartmentID		SMALLINT UNSIGNED NOT NULL,
	PositionID 			SMALLINT UNSIGNED NOT NULL,
	CreateDate			DATETIME DEFAULT NOW(),
    FOREIGN KEY (PositionID) REFERENCES `Position`(PositionID),
    FOREIGN KEY (DepartmentID) REFERENCES Department(DepartmentID)
);

-- BẢNG 4
DROP TABLE IF EXISTS `Group`;
CREATE TABLE `Group` (
	GroupID 			SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	GroupName 			NVARCHAR(100) NOT NULL UNIQUE KEY,
	CreatorID 			SMALLINT UNSIGNED NOT NULL,
	CreateDate			DATETIME DEFAULT NOW(),
    FOREIGN KEY (CreatorID) REFERENCES `Account`(AccountID)
);

-- BẢNG 5
DROP TABLE IF EXISTS GroupAccount;
CREATE TABLE GroupAccount (
	GroupID 			SMALLINT UNSIGNED,
	AccountID 			SMALLINT UNSIGNED,
	JoinDate 			DATETIME DEFAULT NOW(),
    PRIMARY KEY (GroupID,AccountID),
    FOREIGN KEY (GroupID) REFERENCES `Group`(GroupID),
    FOREIGN KEY (AccountID) REFERENCES `Account`(AccountID)
);

-- BẢNG 6
DROP TABLE IF EXISTS TypeQuestion;
CREATE TABLE TypeQuestion (
	TypeID 				SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	TypeName 			ENUM('Essay','Multiple-Choice') NOT NULL
);

-- BẢNG 7
DROP TABLE IF EXISTS CategoryQuestion;
CREATE TABLE CategoryQuestion (
	CategoryID 			SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	CategoryName 		VARCHAR(50) NOT NULL
);

-- BẢNG 8
DROP TABLE IF EXISTS Question;
CREATE TABLE Question (
	QuestionID 			SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	Content 			TEXT NOT NULL,
	CategoryID 			SMALLINT UNSIGNED NOT NULL,
	TypeID 				SMALLINT UNSIGNED NOT NULL,
	CreatorID 			SMALLINT UNSIGNED NOT NULL,
	CreateDate 			DATETIME DEFAULT NOW(),
    FOREIGN KEY (CategoryID) REFERENCES CategoryQuestion(CategoryID),
    FOREIGN KEY (CreatorID) REFERENCES `Account`(AccountID),
    FOREIGN KEY (TypeID) REFERENCES TypeQuestion(TypeID)
); 

-- BẢNG 9
DROP TABLE IF EXISTS Answer;
CREATE TABLE Answer (
	AnswerID 			SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	Content 			TEXT NOT NULL,
	QuestionID 			SMALLINT UNSIGNED NOT NULL,
	isCorrect 			ENUM('T','F') NOT NULL,
    FOREIGN KEY (QuestionID) REFERENCES Question(QuestionID)
);

-- BẢNG 10
DROP TABLE IF EXISTS Exam;
CREATE TABLE Exam (
	ExamID 				SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	CodeExam 			VARCHAR(50) NOT NULL,
	Title 				NVARCHAR(50) NOT NULL,
	CategoryID 			SMALLINT UNSIGNED NOT NULL,
	Duration 			SMALLINT UNSIGNED NOT NULL,
	CreatorID 			SMALLINT UNSIGNED NOT NULL,
	CreateDate 			DATETIME DEFAULT NOW(),
    FOREIGN KEY (CategoryID) REFERENCES CategoryQuestion(CategoryID),
    FOREIGN KEY (CreatorID) REFERENCES Question(CreatorID)
);

-- BẢNG 11
DROP TABLE IF EXISTS ExamQuestion;
CREATE TABLE ExamQuestion (
	ExamID 				SMALLINT UNSIGNED NOT NULL,
	QuestionID 			SMALLINT UNSIGNED NOT NULL,
    PRIMARY KEY (ExamID,QuestionID),
    FOREIGN KEY (ExamID) REFERENCES Exam(ExamID),
    FOREIGN KEY (QuestionID) REFERENCES Question(QuestionID)
);